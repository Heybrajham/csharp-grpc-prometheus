// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace NetGrpcPrometheusTest.Grpc {
  public static partial class TestService
  {
    static readonly string __ServiceName = "NetGrpcPrometheusTest.Grpc.TestService";

    static readonly grpc::Marshaller<global::NetGrpcPrometheusTest.Grpc.PingRequest> __Marshaller_PingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NetGrpcPrometheusTest.Grpc.PingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NetGrpcPrometheusTest.Grpc.PingResponse> __Marshaller_PingResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NetGrpcPrometheusTest.Grpc.PingResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::NetGrpcPrometheusTest.Grpc.PingRequest, global::NetGrpcPrometheusTest.Grpc.PingResponse> __Method_UnaryPing = new grpc::Method<global::NetGrpcPrometheusTest.Grpc.PingRequest, global::NetGrpcPrometheusTest.Grpc.PingResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UnaryPing",
        __Marshaller_PingRequest,
        __Marshaller_PingResponse);

    static readonly grpc::Method<global::NetGrpcPrometheusTest.Grpc.PingRequest, global::NetGrpcPrometheusTest.Grpc.PingResponse> __Method_ClientStreamingPing = new grpc::Method<global::NetGrpcPrometheusTest.Grpc.PingRequest, global::NetGrpcPrometheusTest.Grpc.PingResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "ClientStreamingPing",
        __Marshaller_PingRequest,
        __Marshaller_PingResponse);

    static readonly grpc::Method<global::NetGrpcPrometheusTest.Grpc.PingRequest, global::NetGrpcPrometheusTest.Grpc.PingResponse> __Method_ServerStreamingPing = new grpc::Method<global::NetGrpcPrometheusTest.Grpc.PingRequest, global::NetGrpcPrometheusTest.Grpc.PingResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ServerStreamingPing",
        __Marshaller_PingRequest,
        __Marshaller_PingResponse);

    static readonly grpc::Method<global::NetGrpcPrometheusTest.Grpc.PingRequest, global::NetGrpcPrometheusTest.Grpc.PingResponse> __Method_DuplexPing = new grpc::Method<global::NetGrpcPrometheusTest.Grpc.PingRequest, global::NetGrpcPrometheusTest.Grpc.PingResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "DuplexPing",
        __Marshaller_PingRequest,
        __Marshaller_PingResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::NetGrpcPrometheusTest.Grpc.TestReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of TestService</summary>
    public abstract partial class TestServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::NetGrpcPrometheusTest.Grpc.PingResponse> UnaryPing(global::NetGrpcPrometheusTest.Grpc.PingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::NetGrpcPrometheusTest.Grpc.PingResponse> ClientStreamingPing(grpc::IAsyncStreamReader<global::NetGrpcPrometheusTest.Grpc.PingRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task ServerStreamingPing(global::NetGrpcPrometheusTest.Grpc.PingRequest request, grpc::IServerStreamWriter<global::NetGrpcPrometheusTest.Grpc.PingResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task DuplexPing(grpc::IAsyncStreamReader<global::NetGrpcPrometheusTest.Grpc.PingRequest> requestStream, grpc::IServerStreamWriter<global::NetGrpcPrometheusTest.Grpc.PingResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TestService</summary>
    public partial class TestServiceClient : grpc::ClientBase<TestServiceClient>
    {
      /// <summary>Creates a new client for TestService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TestServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TestService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TestServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TestServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TestServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::NetGrpcPrometheusTest.Grpc.PingResponse UnaryPing(global::NetGrpcPrometheusTest.Grpc.PingRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UnaryPing(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::NetGrpcPrometheusTest.Grpc.PingResponse UnaryPing(global::NetGrpcPrometheusTest.Grpc.PingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UnaryPing, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::NetGrpcPrometheusTest.Grpc.PingResponse> UnaryPingAsync(global::NetGrpcPrometheusTest.Grpc.PingRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UnaryPingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::NetGrpcPrometheusTest.Grpc.PingResponse> UnaryPingAsync(global::NetGrpcPrometheusTest.Grpc.PingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UnaryPing, null, options, request);
      }
      public virtual grpc::AsyncClientStreamingCall<global::NetGrpcPrometheusTest.Grpc.PingRequest, global::NetGrpcPrometheusTest.Grpc.PingResponse> ClientStreamingPing(grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ClientStreamingPing(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::NetGrpcPrometheusTest.Grpc.PingRequest, global::NetGrpcPrometheusTest.Grpc.PingResponse> ClientStreamingPing(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_ClientStreamingPing, null, options);
      }
      public virtual grpc::AsyncServerStreamingCall<global::NetGrpcPrometheusTest.Grpc.PingResponse> ServerStreamingPing(global::NetGrpcPrometheusTest.Grpc.PingRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ServerStreamingPing(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::NetGrpcPrometheusTest.Grpc.PingResponse> ServerStreamingPing(global::NetGrpcPrometheusTest.Grpc.PingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ServerStreamingPing, null, options, request);
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::NetGrpcPrometheusTest.Grpc.PingRequest, global::NetGrpcPrometheusTest.Grpc.PingResponse> DuplexPing(grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DuplexPing(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::NetGrpcPrometheusTest.Grpc.PingRequest, global::NetGrpcPrometheusTest.Grpc.PingResponse> DuplexPing(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_DuplexPing, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override TestServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TestServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(TestServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_UnaryPing, serviceImpl.UnaryPing)
          .AddMethod(__Method_ClientStreamingPing, serviceImpl.ClientStreamingPing)
          .AddMethod(__Method_ServerStreamingPing, serviceImpl.ServerStreamingPing)
          .AddMethod(__Method_DuplexPing, serviceImpl.DuplexPing).Build();
    }

  }
}
#endregion
